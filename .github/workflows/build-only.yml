name: Build and Sign (No Release)

on:
  workflow_dispatch:  # Manual trigger only
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

jobs:
  build-mac:
    name: Build and Sign macOS
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [arm64, x64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Download LLM model
        run: npm run llm:download || echo "Model download failed, continuing anyway"
        continue-on-error: true

      - name: Import Apple certificates
        env:
          APPLE_CERT_BASE64: ${{ secrets.APPLE_CERT_BASE64 }}
          APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate from secrets
          echo "$APPLE_CERT_BASE64" | tr -d '\n\r ' | base64 --decode > $CERTIFICATE_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$APPLE_CERT_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Allow codesign to access keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Build Electron app
        env:
          USE_HARD_LINKS: false
          # Use official Electron releases, not mirrors
          ELECTRON_MIRROR: ""
          electron_mirror: ""
          # Increase network timeout for downloads
          ELECTRON_BUILDER_CACHE_TIMEOUT: 600000
        run: |
          # Retry logic for network issues
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Build attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES"
            
            if [ "${{ matrix.arch }}" = "arm64" ]; then
              npm run dist:mac-arm && break
            else
              npm run dist:mac-intel && break
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "Build failed, retrying in 10 seconds..."
              sleep 10
            fi
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Build failed after $MAX_RETRIES attempts"
            exit 1
          fi

      - name: Notarize macOS app
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Find the DMG file
          DMG_FILE=$(find dist -name "*.dmg" -type f | head -n 1)
          
          if [ -z "$DMG_FILE" ]; then
            echo "No DMG file found!"
            exit 1
          fi
          
          echo "Notarizing $DMG_FILE..."
          
          # Submit for notarization
          xcrun notarytool submit "$DMG_FILE" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait
          
          # Staple the notarization
          xcrun stapler staple "$DMG_FILE"

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: OnlyJobs-${{ inputs.version }}-mac-${{ matrix.arch }}
          path: dist/*.dmg
          retention-days: 7  # Keep for a week

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps

      - name: Download LLM model
        run: npm run llm:download
        continue-on-error: true

      - name: Build Electron app
        env:
          USE_HARD_LINKS: false
          # Use official Electron releases, not mirrors
          ELECTRON_MIRROR: ""
          electron_mirror: ""
          # Increase network timeout for downloads
          ELECTRON_BUILDER_CACHE_TIMEOUT: 600000
        run: |
          # Retry logic for network issues
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Build attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES"
            
            npm run dist:win && break
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "Build failed, retrying in 10 seconds..."
              sleep 10
            fi
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Build failed after $MAX_RETRIES attempts"
            exit 1
          fi

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: OnlyJobs-${{ inputs.version }}-windows
          path: dist/*.exe
          retention-days: 7